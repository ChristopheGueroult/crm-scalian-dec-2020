✔ stylings config scss et variables css @started(20-12-14 15:32) @done(20-12-15 10:00) @lasted(18h28m23s)
✔ ui component @done(20-12-15 10:00)
✔ lazy loading et routing @done(20-12-15 10:00)
✔ end ui with directives @done(20-12-15 14:38)
✔ documentation @done(20-12-15 15:37)
✔ webpack bundle analyzer @done(20-12-15 15:37)

✔ pipes angular @done(20-12-16 15:15)
✔ pipes perso @done(20-12-16 15:15)
✔ pipe async @done(20-12-17 09:49)
✔ strategy onpush @done(20-12-17 09:49)
✔ force change detection @done(20-12-17 09:49)
☐ tableau dark

☐ tp :
  ✔ créer le module PageNotFoundModule (lazy loading) @done(20-12-15 11:50)
  ✔ créer pages/page-not-found-component (declaré sur PageNotFoundModule) @done(20-12-15 11:50)
  ✔ créer le module PageNotFoundRoutingModule (1 route) @done(20-12-15 11:51)
  ✔ route pour charger PageNotFoundModule sur AppRoutingModule avec loadChildren @done(20-12-15 13:30)
  ✔ bug à corriger @done(20-12-15 13:30)

  tp client :
    ☐ enum ACTIVE INACTIVE
    ☐ interface et model (db.json)
    ☐ model (20 pour la tva, ACTIVE pour le state, 0 pour le totalCaHt)
    ☐ clientsService (ex OrdersService)
    ☐ pageListClients (ex pageListOrders) nom, total HT, tva, total TTC, state
      ☐ utilisez template fullwidth
      ☐ utilisez tableau light ou tableau dark
      ☐ utilisez la meme directive que pour les orders (state-active, state-inactive)
      ☐ utlisez le meme pipe total pour afficher le total ttc

✔ @Output() @done(20-12-18 08:07)
✔ formulaire @done(20-12-18 08:07)
✔ validators @done(20-12-18 08:07)
✔ scss forms @done(20-12-18 08:07)

tp edit :
  ☐ ajouter Action dans list orders ts (headers[])
  ☐ ajouter un td dans le html avec une instance de icon-delete
  ☐ ajouter un event click sur l'icon et on le bind avec une fonction goToEdit(item)
  ☐ créer goToEdit(item: Order) dans le ts pour faire une redirection vers orders/edit/un_id
  ☐ sur orders-routing, ajouter une route pour edit/un_id (id étant un paramètre)

  ☐ PageEditOrderComponent
    ☐ dans ts, récupérer l'id dans la route
    ☐ appel http (via le service OrdersService ID)
    ☐ sur OrdersService créer la méthode getItemById(id)
    ☐ faire le subscribe dans pageeditcomponent ts pour récupérer la réponse de l'api
    ☐ enregistrer la réponse de l'api dans une variable public item
    ☐ Dans le html : on utilise app-template-container, on projette un title, on projette un body qui contient une instance de app-form-order (avec binding init-item) et l'@Output() qui appelera edit($event)
    ☐ dans le ts de PageEditOrderComponent créé la fonction edit(item: Order) (this.os.update(item))
    ☐ faire le subscribe() et dans le subscribe on ridige vers la route orders






